scale_colour_manual(values = (our_dryhex_no_na))
#dataframe for Dry value
Wet_df <- data.frame(sampleID = all_data$'Sample.ID',
wet_yr = Colour$'Wet.YR',
hue = paste0(Colour$`Wet.YR`, "YR"),
wet_value = Colour$'Wet.value',
wet_chroma = Colour$'Wet.chroma',
munsell_colour = Colour$'Wet.',
stringsAsFactors = FALSE
our_wethex <- munsell2rgb(Wet_df$hue, as.numeric(Wet_df$wet_value), as.numeric(Wet_df$wet_chroma))
our_wethex_no_na <- na.omit(our_wethex)
depth <- as.numeric(as.character(all_data$Depth.m.))
#Wet plot
ggplot(Wet_df, aes(x = as.numeric(as.character(wet_value)), y =depth, colour = Colour$'Wet.')) +
geom_point(size =6) +
theme_minimal()+
scale_colour_manual(values = our_wethex_no_na)
```
Dry_df <- data.frame(sampleID = all_data$'Sample.ID',
dry_yr = Colour$'Dry.YR',
hue = paste0(Colour$`Dry.YR`, "YR"),
dry_value = Colour$'Dry.value',
dry_chroma = Colour$'Dry.chroma',
munsell_colour = Colour$'Dry',
stringsAsFactors = FALSE)
all_data <- my_gsheet %>% get_via_csv(ws = 1)
LOI <- my_gsheet %>% get_via_csv(ws = 7)
Colour <- my_gsheet %>% get_via_csv(ws = 3)
PH <- my_gsheet %>% get_via_csv(ws = 5)
EC <- my_gsheet %>% get_via_csv(ws = 6)
MS <- my_gsheet %>% get_via_csv(ws = 4)
library("ggplot2")
library("aqp")
library("munsell")
Dry_df <- data.frame(sampleID = all_data$'Sample.ID',
dry_yr = Colour$'Dry.YR',
hue = paste0(Colour$`Dry.YR`, "YR"),
dry_value = Colour$'Dry.value',
dry_chroma = Colour$'Dry.chroma',
munsell_colour = Colour$'Dry',
stringsAsFactors = FALSE)
our_dryhex <- munsell2rgb(Dry_df$hue, as.numeric(as.character(Dry_df$dry_value)), as.numeric(as.character(Dry_df$dry_chroma)))
depth <- as.numeric(as.character(all_data$Depth.m.))
#Dry plot
ggplot(Dry_df, aes(x = as.numeric(as.character(dry_value)), y=depth, colour = Colour$'Dry')) +
geom_point(size =6) +
theme_minimal() +
scale_colour_manual(values = (our_dryhex_no_na))
ggplot(Dry_df, aes(x = as.numeric(as.character(dry_value)), y=depth, colour = Colour$'Dry')) +
geom_point(size =6) +
theme_minimal() +
scale_colour_manual(values = (our_dryhex))
Wet_df <- data.frame(sampleID = all_data$'Sample.ID',
wet_yr = Colour$'Wet.YR',
hue = paste0(Colour$`Wet.YR`, "YR"),
wet_value = Colour$'Wet.value',
wet_chroma = Colour$'Wet.chroma',
munsell_colour = Colour$'Wet.',
stringsAsFactors = FALSE
our_wethex <- munsell2rgb(Wet_df$hue, as.numeric(Wet_df$wet_value), as.numeric(Wet_df$wet_chroma))
our_wethex_no_na <- na.omit(our_wethex)
depth <- as.numeric(as.character(all_data$Depth.m.))
#Wet plot
ggplot(Wet_df, aes(x = as.numeric(as.character(wet_value)), y =depth, colour = Colour$'Wet.')) +
geom_point(size =6) +
theme_minimal()+
scale_colour_manual(values = our_wethex_no_na)
Wet_df <- data.frame(sampleID = all_data$'Sample.ID',
wet_yr = Colour$'Wet.YR',
hue = paste0(Colour$`Wet.YR`, "YR"),
wet_value = Colour$'Wet.value',
wet_chroma = Colour$'Wet.chroma',
munsell_colour = Colour$'Wet.',
stringsAsFactors = FALSE
our_wethex <- munsell2rgb(Wet_df$hue, as.numeric(Wet_df$wet_value), as.numeric(Wet_df$wet_chroma))
our_wethex <- munsell2rgb(Wet_df$hue, as.numeric(Wet_df$wet_value), as.numeric(Wet_df$wet_chroma))
our_wethex_no_na <- na.omit(our_wethex)
Wet_df <- data.frame(sampleID = all_data$'Sample.ID',
wet_yr = Colour$'Wet.YR',
hue = paste0(Colour$`Wet.YR`, "YR"),
wet_value = Colour$'Wet.value',
wet_chroma = Colour$'Wet.chroma',
munsell_colour = Colour$'Wet.',
stringsAsFactors = FALSE
scale_colour_manual(values = (our_dryhex))
#dataframe for Dry value
Wet_df <- data.frame(sampleID = all_data$'Sample.ID',
wet_yr = Colour$'Wet.YR',
hue = paste0(Colour$`Wet.YR`, "YR"),
wet_value = Colour$'Wet.value',
wet_chroma = Colour$'Wet.chroma',
munsell_colour = Colour$'Wet.',
stringsAsFactors = FALSE)
our_wethex <- munsell2rgb(Wet_df$hue, as.numeric(Wet_df$wet_value), as.numeric(Wet_df$wet_chroma))
our_wethex_no_na <- na.omit(our_wethex)
depth <- as.numeric(as.character(all_data$Depth.m.))
#Wet plot
ggplot(Wet_df, aes(x = as.numeric(as.character(wet_value)), y =depth, colour = Colour$'Wet.')) +
geom_point(size =6) +
theme_minimal()+
scale_colour_manual(values = our_wethex_no_na)
our_dryhex <- munsell2rgb(Dry_df$hue, as.numeric(as.character(Dry_df$dry_value)), as.numeric(as.character(Dry_df$dry_chroma)))
install.packages("httpuv")
library ("httpuv")
library ("httpuv")
authorize(new_user = TRUE) # new line we didn't have before
View(PH)
View(EC)
View(all_data)
EC <- my_gsheet %>% get_via_csv(ws = 6)
authorize(new_user = TRUE) # new line we didn't have before
View(EC)
PH$Sample.ID <- as.numeric(PH$'Sample.ID')
EC$Sample.ID <- as.numeric(EC$'Sample.ID')
PH$Sample.ID <- as.numeric(PH$'Sample.ID')
EC$Sample.ID <- as.numeric(EC$'Sample.ID')
PH$pH.result. <- as.numeric(PH$'pH.result.')
EC$EC.result. <- as.numeric(EC$'EC.result.')
library("ggplot2")
ggplot(PH, aes(PH$pH.result., PH$Sample.ID)) +
geom_point() +
scale_y_reverse() +
xlab("pH") +
ylab("Depth(m)") +
theme_minimal(base_size = 14)
ggplot(PH, aes(PH$pH.result., all_data$Depth.m.)) +
geom_point() +
scale_y_reverse() +
xlab("pH") +
ylab("Depth(m)") +
theme_minimal(base_size = 14)
ggplot(PH, aes(pH.result., all_data$Depth.m.)) +
geom_point() +
scale_y_reverse() +
xlab("pH") +
ylab("Depth(m)") +
theme_minimal(base_size = 14)
ggplot(EC, aes(EC.result., all_data$Depth.m.)) +
geom_point() +
scale_y_reverse() +
xlab("Electric Conductivity") +
ylab("Depth(m)") +
theme_minimal(base_size = 14)
View(MS)
hfdf <- data.frame(MS$Sample.ID, MS$HFAverage)
lfdf <- data.frame(MS$Sample.ID, MS$LFAverage)
ms_stack <- stack(list(hf= MS$HFAverage,
lf= MS$LFAverage))
id_stack <- stack(list(depth= all_data$'Depth.m.',
depth= all_data$'Depth.m.'))
ms_df <- data.frame(ms_stack, id_stack)
str(lfdf)
str(ms_df)
View(lfdf)
lfdf$MS.LFAverage <- as.numeric(as.character(lfdf$MS.LFAverage ))
hfdf$MS.HFAverage <- as.numeric(as.character(hfdf$MS.HFAverage ))
View(ms_df)
str(lfdf)
str(ms_df)
lfdf$MS.LFAverage <- as.numeric(as.character(lfdf$MS.LFAverage ))
hfdf$MS.HFAverage <- as.numeric(as.character(hfdf$MS.HFAverage ))
ms_df$values <- as.numeric(as.character(ms_df$values))
ms_df$values.1 <- as.numeric(as.character(ms_df$values.1))
ms_df$ind.1 <- as.numeric(as.character(ms_df$ind.1))
ggplot(lfdf, aes(MS.LFAverage, MS.Sample.ID)) +
geom_point(size=3) +
ylab("Sample ID") +
xlab("Magnetic Susceptibility (LF)") +
theme_minimal()
ggplot(hfdf, aes(MS.HFAverage, MS.Sample.ID)) +
geom_point(size = 3) +
ylab("Sample ID") +
xlab("Magnetic Susceptibility (HF)") +
theme_minimal()
ggplot(ms_df, aes(x=values, fill= ind, xlab="Mag")) +
xlab("Magnetic Susceptbility")+
ylab("Density") +
geom_density(alpha=.3)
Frequency <- ms_df$ind
ggplot(ms_df, aes(x=values, y=values.1, colour= Frequency)) +
geom_point() +
ylab("Depth") +
xlab("Magnetic Susceptibility") +
ggtitle("HF and LF: Stratigraphic Plot")+
scale_y_reverse ()+
theme_minimal()
samplemass <- as.numeric(MS$'lid.pot.sampleAverage')
Xlf <- as.numeric(MS$LFAverage) * (10/samplemass)
Xhf <- as.numeric(MS$HFAverage) * (10/samplemass)
xfd <- as.numeric(100*((Xlf-Xhf)/Xlf))
depth <- as.numeric(as.character(all_data$'Depth.m.'))
ggplot(ms_df, aes(xfd, depth))+
geom_point()+
ylab("Depth") +
xlab ("Coefficient of Frequency Dependency")+
scale_y_reverse()
library(rioja)
View(Colour)
library("googlesheets")
suppressMessages(library("dplyr"))
# register sheet
authorize(new_user = TRUE) # new line we didn't have before
my_gsheet_key <-  "1vFtO8i3zH8pk4RoxkcQw5kFtCDeooYVimUaXGD8n1WY"
my_gsheet <- register_ss(my_gsheet_key, visibility = "public")
# also tried it without the visibility argument, no difference
# get data
LOI <- my_gsheet %>% get_via_csv(ws = 5)
all_data <- my_gsheet %>% get_via_csv(ws = 1)
# if a row is all NA, delete it
ind <- apply(LOI, 1, function(x) all(is.na(x)))
LOI <- LOI[ !ind, ]
LOI_sample_ID <- LOI$sampleID
str(LOI)
LOI <- as.data.frame(sapply( LOI, as.numeric, as.character ))
str(LOI)
################ Organic Percentage Mass ##################
M1.1 <- LOI$`crucible.mass.run.1.average`
M2.1 <- LOI$`X105degree.including.crucible..run.1.average`
M3.1 <- LOI$`after430run1average`
M4.1 <- LOI$`after1000run1average`
M1.2 <- LOI$`crucible.mass.run.2.average`
M2.2 <- LOI$`X105degree.including.crucible..run.2.average`
M3.2 <- LOI$`after430run2average`
M4.2 <- LOI$`after1000run2average`
M1.3 <- LOI$`crucible.mass.run.3.average`
M2.3 <- LOI$`X105degree.including.crucible..run.3.average`
M3.3 <- LOI$`after430run3average`
M4.3 <- LOI$`after1000run3average`
org_per_mass1 <- 100 * ((M2.1-M3.1)/(M2.1-M1.1))
org_per_mass2 <- 100 * ((M2.2-M3.2)/(M2.2-M1.2))
org_per_mass3 <- 100 * ((M2.3-M3.3)/(M2.3-M1.3))
# check for weirdness
plot(org_per_mass1)
plot(org_per_mass2)
plot(org_per_mass3)
# >6 probably wrong, <0 clearly wrong
LOI_stack <- stack(list(run1 = org_per_mass1,
run2 = org_per_mass2,
run3 = org_per_mass3))
# replace problem values with NA
LOI_stack$values <- with(LOI_stack, as.numeric(ifelse(values > 6 | values < 0, "NA", values)))
# plot to check again
library("ggplot2")
ggplot(LOI_stack, aes(ind, values)) +
geom_violin() +
geom_jitter() +
xlab("Run") +
ylab("Loss on Ignition: Organic") +
theme_minimal(base_size = 14)
# looks ok, let's get the averages of the runs...
org_per_mass_df <- unstack(LOI_stack)
org_per_mass_av <- rowMeans(org_per_mass_df, na.rm = TRUE)
# get depths for plot labels
org_per_mass_av_df <- data.frame(org_per_mass_av = org_per_mass_av,
depths = as.numeric(all_data$`Depth.m.`))
library("ggplot2")
ggplot(org_per_mass_av_df, aes(org_per_mass_av, depths)) +
geom_point() +
scale_y_reverse() +
xlab("Loss on Ignition: Organic") +
ylab("Depths") +
theme_minimal(base_size = 14)
################ Carbonate Percentage Mass #################
carb_per_mass1 <- 100 * ((M3.1-M4.1)/(M3.1-M1.1))
carb_per_mass2 <- 100 * ((M3.2-M4.2)/(M3.2-M1.2))
carb_per_mass3 <- 100 * ((M3.3-M4.3)/(M3.3-M1.3))
# check for weirdness
plot(carb_per_mass1)
plot(carb_per_mass2)
plot(carb_per_mass3)
############################# from this is what I did###################
LOI__stack <- stack(list(run1 =carb_per_mass1,
run2 =carb_per_mass2,
run3 =carb_per_mass3))
# replace problem values with NA
LOI__stack$values <- with(LOI__stack, as.numeric(ifelse(values > 5 | values < 0, "NA", values)))
# plot to check again
library("ggplot2")
ggplot(LOI__stack, aes(ind, values)) +
geom_violin() +
geom_jitter() +
xlab("Run") +
ylab("Mass lost")+
ggtitle("Loss on Ignition: Carbonate") +
theme_minimal(base_size = 14)
# looks ok, let's get the averages of the runs...
carb_per_mass_df <- unstack(LOI__stack)
carb_per_mass_av <- rowMeans(carb_per_mass_df, na.rm = TRUE)
# get depths for plot labels
carb_per_mass_av_df <- data.frame(carb_per_mass_av = carb_per_mass_av,
depths = as.numeric(all_data$`Depth.m.`))
library("ggplot2")
ggplot(carb_per_mass_av_df, aes(carb_per_mass_av, depths)) +
geom_point() +
ggtitle("Loss on ignition: Carbonate") +
scale_y_reverse() +
xlab("Mass Lost") +
ylab("Depths") +
theme_minimal(base_size = 14)
# Formula for measurement of organic material: the difference between the dry weight and the post-430??? burn
# %C1=100[(M2-M3)/(M2-M1)]
#
# Formula for measurement of carbonates: the difference between the post-430??? burn and post-1000??? burn
# %C2=100[(M3-M4)/(M3-M1)]
#
# %C1=percentage of organic material
# %C2=percentage of carbonates
# M1=mass of the crucible (average of two value)
# M2=original mass of sample+crucible dried at 105??? for 24h
# M3=mass of sample+crucible after ignition at 430??? for 4h
# M4=mass of sample+crucible after ignition at 1000??? for 2
###########################colour########################################
Colour <- my_gsheet %>% get_via_csv(ws = 6)
all_data <- my_gsheet %>% get_via_csv(ws = 1)
#split value-chroma
Dry.Value <- sapply(strsplit(as.character(all_data$'Dry.num'), "\\/"), "[[", 1)
Dry.Chroma <- sapply(strsplit(as.character(all_data$'Dry.num'), "\\/"), "[[", 2)
Wet.Value <- sapply(strsplit(as.character(all_data$'Wet.num'), "\\/"), "[[", 1)
Wet.Chroma <- sapply(strsplit(as.character(all_data$'Wet.num'), "\\/"), "[[", 2)
#############making table for Dry colour##########
Dry_df <- data.frame(sampleID = all_data$'Sample.ID',
dry_yr = all_data$'Dry.YR',
hue = paste0(all_data$`Dry.YR`, "YR"),
dry_value = Dry.Value,
dry_chroma = Dry.Chroma,
munsell_colour = Colour$'Dry..number',
stringsAsFactors = FALSE)
Dry_df$munsell_colour_ <- gsub("10.5", "10", Dry_df$munsell_colour)
library(aqp)
our_dryhex <- munsell2rgb(Dry_df$hue, as.numeric(as.character(Dry_df$dry_value)), as.numeric(as.character(Dry_df$dry_chroma)))
our_dryhex_no_na <- na.omit(our_dryhex)
depth <- as.numeric(as.character(all_data$Depth.m.))
library(ggplot2); library(munsell)
ggplot(Dry_df, aes(x = as.numeric(as.character(dry_value)), y=depth, colour = Colour$'Dry..number')) +
geom_point(size =6) +
theme_minimal() +
scale_colour_manual(values = (our_dryhex_no_na))
#################Wet coulour#####################
Wet_df <- data.frame(sampleID = all_data$'Sample.ID',
wet_yr = all_data$'Wet.YR',
hue = paste0(all_data$`Wet.YR`, "YR"),
wet_value = Wet.Value,
wet_chroma = Wet.Chroma,
munsell_colour = Colour$'wet.number',
stringsAsFactors = FALSE)
Wet_df$munsell_colour_ <- gsub("10.5", "10", Wet_df$munsell_colour)
library(aqp)
our_wethex <- munsell2rgb(Wet_df$hue, as.numeric(Wet_df$wet_value), as.numeric(Wet_df$wet_chroma))
our_wethex_no_na <- na.omit(our_wethex)
depth <- as.numeric(as.character(all_data$Depth.m.))
library(ggplot2); library(munsell)
ggplot(Wet_df, aes(x = as.numeric(as.character(wet_value)), y =depth, colour = Colour$'wet.number')) +
geom_point(size =6) +
theme_minimal()+
scale_colour_manual(values = our_wethex_no_na)
###########################ph########################################
# get data
ph_and_ec <- my_gsheet %>% get_via_csv(ws = 3)
all_data <- my_gsheet %>% get_via_csv(ws = 1)
#ben's code to fix sheet
n <- nrow(ph_and_ec)
ph <- ph_and_ec[seq(1, n, 2), ]
ec <- ph_and_ec[seq(2, n, 2), ]
#fix sample ids
library(zoo)
sample.id <- zoo(ph_and_ec$sample.ID)
ID <- na.locf(sample.id)
#make a data frame with IDs without NAs
# convert from character to numeric
ph$'sample ID' <- as.numeric(ph$'sample.ID')
ec$'sample ID' <- ph$'sample.ID'
View(ph)
View(ec)
# convert from character to numeric
ec$ECresult <- as.numeric(ec$ECresult)
ph$pHresult <- as.numeric(ph$pHresult)
library("ggplot2")
ggplot(ph, aes(pHresult, as.numeric(all_data$'Depth.m.'))) +
geom_point() +
scale_y_reverse() +
xlab("pH") +
ylab("Depth(m)") +
theme_minimal(base_size = 14)
library("ggplot2")
ggplot(ec, aes(ECresult, as.numeric(all_data$'Depth.m.'))) +
geom_point() +
scale_y_reverse() +
xlab("Electric Conductivity") +
ylab("Depth(m)") +
theme_minimal(base_size = 14)
########################################### MS ###########################################################
MS <- my_gsheet %>% get_via_csv(ws = 4)
all_data <- my_gsheet %>% get_via_csv(ws = 1)
hfdf <- data.frame(MS$sampleID, MS$HFAverage)
lfdf <- data.frame(MS$sampleID, MS$LFAverage)
ms_stack <- stack(list(hf= MS$HFAverage,
lf= MS$LFAverage))
id_stack <- stack(list(depth= all_data$'Depth.m.',
depth= all_data$'Depth.m.'))
ms_df <- data.frame(ms_stack, id_stack)
# inspect structure of dataframes
str(lfdf)
str(ms_df)
# convert from factor to numeric
lfdf$MS.LFAverage <- as.numeric(as.character(lfdf$MS.LFAverage ))
hfdf$MS.HFAverage <- as.numeric(as.character(hfdf$MS.HFAverage ))
ms_df$values <- as.numeric(as.character(ms_df$values))
ms_df$values.1 <- as.numeric(as.character(ms_df$values.1))
ms_df$ind.1 <- as.numeric(as.character(ms_df$ind.1))
library("ggplot2")
ggplot(lfdf, aes(MS.LFAverage, MS.sampleID)) +
geom_point(size=3) +
ylab("Sample ID") +
xlab("Magnetic Susceptibility (LF)") +
theme_minimal()
ggplot(hfdf, aes(MS.HFAverage, MS.sampleID)) +
geom_point(size = 3) +
ylab("Sample ID") +
xlab("Magnetic Susceptibility (HF)") +
theme_minimal()
ggplot(ms_df, aes(x=values, fill= ind, xlab="Mag")) +
xlab("Magnetic Susceptbility")+
ylab("Density") +
geom_density(alpha=.3)
# new one...
Frequency <- ms_df$ind
ggplot(ms_df, aes(x=values, y=values.1, colour= Frequency)) +
geom_point() +
ylab("Depth") +
xlab("Magnetic Susceptibility") +
ggtitle("HF and LF: Stratigraphic Plot")+
scale_y_reverse ()+
theme_minimal()
# Frequency Dependency
#formula of it
#Xfd%= 100*((Xlf-Xhf)/Xlf)
#mass sus for Xlf: LFAverage*(10/mass of sample)
#mass sus for Xhf: HFAverage*(10/mass of sample)
samplemass <- as.numeric(MS$'lid.pot.sampleAverage')
Xlf <- as.numeric(MS$LFAverage) * (10/samplemass)
Xhf <- as.numeric(MS$HFAverage) * (10/samplemass)
xfd <- as.numeric(100*((Xlf-Xhf)/Xlf))
depth <- as.numeric(as.character(all_data$Depth.m.))
#Create a  frequency dependency plot
ggplot(ms_df, aes(xfd, depth))+
geom_point()+
ylab("Depth") +
xlab ("Coefficient of Frequency Dependency")+
scale_y_reverse()
###################################Combine all together##############
Dry_df_.<- gsub("/", ".", all_data$'Dry.num')
Wet_df_.<- gsub("/", ".", all_data$'Wet.num')
Wet_df_._2.5<- gsub("2.5.1", "2.5", Wet_df_.)
library(rioja)
PH<- ph$pHresult
EC <- ec$ECresult
Carbon_Loss <- carb_per_mass_av_df$carb_per_mass_av
Organic_Loss <- org_per_mass_av_df$org_per_mass_av
LF <- lfdf$MS.LFAverage
HF <- hfdf$MS.HFAverage
WET <- as.numeric(Wet_df_._2.5)
D <- all_data$'Depth.m.'
DRY <- as.numeric(Dry_df_.)
total <- data.frame(PH,
EC,
Carbon_Loss,
Organic_Loss,
LF,
HF,
DRY,
WET)
depth <- as.numeric(as.character(all_data$'Depth.m.'))
# examine the results and compare to original data
strat.plot(yvar=depth, ylabel= "Depth", cex.ylabel= 1,
cex.xlabel= 1 , srt.xlabel= 360,
y.rev=TRUE,
total)
View(Colour)
View(our_dryhex)
load("C:/Users/user/Desktop/ra/NW_bulk_sediment/data/my_gsheet.RData")
load("C:/Users/user/Desktop/ra/NW_bulk_sediment/S15 RA Gayoung.Rmd")
devtools::install_github("rstudio/rticles")
require("ggplot2")
x <- 0:100
y <- 2 * (x + rnorm(length(x), sd = 3) + 3)
ggplot(data = data.frame(x, y),
aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm")
install.packages("xtable")
devtools::install_github("rstudio/rticles")
devtools::install_github("crsh/papaja")
setwd("C:/Users/user/docker/qualitatavehomework")
$^1$University of Washington
install.packages('knitr', repos = c('http://rforge.net', 'http://cran.rstudio.org'),
type = 'source')
df
library('knitr', repos = c('http://rforge.net', 'http://cran.rstudio.org'),
type = 'source')
library(knitr)
install.packages("knitr")
library("knitr")
install.packages("pander")
library("pander")
install.packages("rmarkdown")
library("rmarkdown")
render(C:\Users\user\docker\qualitatavehomework\Qualitativeassignment_apa.Rmd)
render(C:/Users/user/docker/qualitatavehomework/Qualitativeassignment_apa.Rmd)
render(Users\user\docker\qualitatavehomework\Qualitativeassignment_apa.Rmd)
render(user\docker\qualitatavehomework\Qualitativeassignment_apa.Rmd)
render(C:/Users/user/docker/qualitatavehomework/Qualitativeassignment_apa.Rmd)
render(/user/docker/qualitatavehomework/Qualitativeassignment_apa.Rmd)
