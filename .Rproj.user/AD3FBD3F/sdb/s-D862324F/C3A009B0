{
    "contents" : "\nreadGoogleSheet <- function(url, na.string=\"\", header=TRUE){\n  \n  stopifnot(require(XML))\n  \n  # Suppress warnings because Google docs seems to have incomplete final line\n  \n  suppressWarnings({\n    doc <- paste(readLines(url), collapse=\" \")\n  })\n  \n  if(nchar(doc) == 0) stop(\"No content found\")\n  \n  htmlTable <- gsub(\"^.*?(<table.*</table).*$\", \"\\\\1>\", doc)\n  \n  ret <- readHTMLTable(htmlTable, header=header, stringsAsFactors=FALSE, as.data.frame=TRUE)\n  \n  lapply(ret, function(x){ x[ x == na.string] <- NA; x}\n         \n  )}\n\n\ncleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){\n  if(!is.data.frame(dat)){\n    dat <- dat[[table]]\n  }\n  \n  if(is.na(dropFirstCol)) {\n    firstCol <- na.omit(dat[[1]])\n    if(all(firstCol == \".\") || all(firstCol== as.character(seq_along(firstCol)))) {\n      dat <- dat[, -1]\n    }\n  } else if(dropFirstCol) {\n    dat <- dat[, -1]\n  }\n  \n  if(skip > 0){\n    dat <- dat[-seq_len(skip), ]\n  }\n  \n  if(nrow(dat) == 1) return(dat)\n  \n  \n  if(nrow(dat) >= 2){\n    if(all(is.na(dat[2, ]))) dat <- dat[-2, ]\n  }\n  if(header && nrow(dat) > 1){\n    header <- as.character(dat[1, ])\n    names(dat) <- header\n    dat <- dat[-1, ]\n  }\n  \n  # Keep only desired columns\n  if(!is.na(ncols)){\n    ncols <- min(ncols, ncol(dat))\n    dat <- dat[, seq_len(ncols)]\n  }\n  \n  # Keep only desired rows\n  if(nrows > 0){\n    nrows <- min(nrows, nrow(dat))\n    dat <- dat[seq_len(nrows), ]\n  }\n  \n  # Rename rows\n  rownames(dat) <- seq_len(nrow(dat))\n  dat\n}\n\n\n\nu <- \"https://docs.google.com/spreadsheets/d/1vFtO8i3zH8pk4RoxkcQw5kFtCDeooYVimUaXGD8n1WY/pubhtml\"\ng <- readGoogleSheet(u)\nLOI <- cleanGoogleTable(g, table = 5)\nall_data <- cleanGoogleTable(g, table = 1)\n\n# if a row is all NA, delete it\nind <- apply(LOI, 1, function(x) all(is.na(x)))\nLOI <- LOI[ !ind, ]\n\nLOI_sample_ID <- LOI$sampleID\n\nstr(LOI)\n\nLOI <- as.data.frame(sapply( LOI, as.numeric, as.character ))\n\nstr(LOI)\n\n################ Organic Percentage Mass ##################\n\nM1.1 <- LOI$`crucible mass run 1 average`\nM2.1 <- LOI$`105degree(including crucible) run 1 average` \nM3.1 <- LOI$`after430run1average`\nM4.1 <- LOI$`after1000run1average`\n\nM1.2 <- LOI$`crucible mass run 2 average`\nM2.2 <- LOI$`105degree(including crucible) run 2 average` \nM3.2 <- LOI$`after430run2average`\nM4.2 <- LOI$`after1000run2average`\n\nM1.3 <- LOI$`crucible mass run 3 average`\nM2.3 <- LOI$`105degree(including crucible) run 3 average` \nM3.3 <- LOI$`after430run3average`\nM4.3 <- LOI$`after1000run3average`\n\norg_per_mass1 <- 100 * ((M2.1-M3.1)/(M2.1-M1.1))\norg_per_mass2 <- 100 * ((M2.2-M3.2)/(M2.2-M1.2))\norg_per_mass3 <- 100 * ((M2.3-M3.3)/(M2.3-M1.3))\n\n# check for weirdness\n\nplot(org_per_mass1)\nplot(org_per_mass2)\nplot(org_per_mass3)\n\n# >6 probably wrong, <0 clearly wrong\nLOI_stack <- stack(list(run1 = org_per_mass1, \n                        run2 = org_per_mass2, \n                        run3 = org_per_mass3))\n\n# replace problem values with NA\nLOI_stack$values <- with(LOI_stack, as.numeric(ifelse(values > 6 | values < 0, \"NA\", values)))\n\n\n\n# plot to check again\n\nlibrary(\"ggplot2\")\nggplot(LOI_stack, aes(ind, values)) +\n  geom_violin() +\n  geom_jitter() +\n  xlab(\"Run\") +\n  ylab(\"Loss on Ignition: Organic\") +  \n  theme_minimal(base_size = 14)\n\n# looks ok, let's get the averages of the runs...\n\norg_per_mass_df <- unstack(LOI_stack)\norg_per_mass_av <- rowMeans(org_per_mass_df, na.rm = TRUE)\n\n# get depths for plot labels \n\norg_per_mass_av_df <- data.frame(org_per_mass_av = org_per_mass_av,\n                                 depths = as.numeric(all_data$`Depth(m)`))\n\n\n\nlibrary(\"ggplot2\")\nggplot(org_per_mass_av_df, aes(org_per_mass_av, depths)) +\n  geom_point() +\n  scale_y_reverse() + \n  xlab(\"Loss on Ignition: Organic\") +\n  ylab(\"Depths\") +  \n  theme_minimal(base_size = 14) \n\n################ Carbonate Percentage Mass #################\n\ncarb_per_mass1 <- 100 * ((M3.1-M4.1)/(M3.1-M1.1))\ncarb_per_mass2 <- 100 * ((M3.2-M4.2)/(M3.2-M1.2))\ncarb_per_mass3 <- 100 * ((M3.3-M4.3)/(M3.3-M1.3))\n\n# check for weirdness\n\nplot(carb_per_mass1)\nplot(carb_per_mass2)\nplot(carb_per_mass3)\n\n############################# from this is what I did###################\n\nLOI__stack <- stack(list(run1 =carb_per_mass1, \n                        run2 =carb_per_mass2, \n                        run3 =carb_per_mass3))\n\n# replace problem values with NA\nLOI__stack$values <- with(LOI__stack, as.numeric(ifelse(values > 5 | values < 0, \"NA\", values)))\n\n\n# plot to check again\n\nlibrary(\"ggplot2\")\nggplot(LOI__stack, aes(ind, values)) +\n  geom_violin() +\n  geom_jitter() +\n  xlab(\"Run\") +\n  ylab(\"Loss on Ignition: Carbonate\") +  \n  theme_minimal(base_size = 14) \n\n# looks ok, let's get the averages of the runs...\n\ncarb_per_mass_df <- unstack(LOI__stack)\ncarb_per_mass_av <- rowMeans(carb_per_mass_df, na.rm = TRUE)\n\n# get depths for plot labels \n\ncarb_per_mass_av_df <- data.frame(carb_per_mass_av = carb_per_mass_av,\n                                 depths = as.numeric(all_data$`Depth(m)`))\n\n\n\n\nlibrary(\"ggplot2\")\nggplot(carb_per_mass_av_df, aes(carb_per_mass_av, depths)) +\n  geom_point() +\n  scale_y_reverse() + \n  xlab(\"Loss on Ignition: Carbonate\") +\n  ylab(\"Depths\") +  \n  theme_minimal(base_size = 14) \n\n\n\n\n\n\n\n\n# \n# Formula for measurement of organic material: the difference between the dry weight and the post-430ºC burn\n# %C1=100[(M2-M3)/(M2-M1)]\n# \n# Formula for measurement of carbonates: the difference between the post-430ºC burn and post-1000ºC burn\n# %C2=100[(M3-M4)/(M3-M1)]\n# \n# %C1=percentage of organic material\n# %C2=percentage of carbonates\n# M1=mass of the crucible (average of two value)\n# M2=original mass of sample+crucible dried at 105ºC for 24h\n# M3=mass of sample+crucible after ignition at 430ºC for 4h\n# M4=mass of sample+crucible after ignition at 1000ºC for 2\n\n###########################colour########################################\n\nu <- \"https://docs.google.com/spreadsheets/d/1vFtO8i3zH8pk4RoxkcQw5kFtCDeooYVimUaXGD8n1WY/pubhtml\"\ng <- readGoogleSheet(u)\nColour<- cleanGoogleTable(g, table = 6)\nall_data <- cleanGoogleTable(g, table = 1)\n\n#split value-chroma\n\nDry.Value <- sapply(strsplit(as.character(all_data$'Dry-num'), \"\\\\/\"), \"[[\", 1)\n\nDry.Chroma <- sapply(strsplit(as.character(all_data$'Dry-num'), \"\\\\/\"), \"[[\", 2)\n\nWet.Value <- sapply(strsplit(as.character(all_data$'Wet-num'), \"\\\\/\"), \"[[\", 1)\n\nWet.Chroma <- sapply(strsplit(as.character(all_data$'Wet-num'), \"\\\\/\"), \"[[\", 2)\n\n#############making table for Dry colour##########\n\n\nDry_df <- data.frame(sampleID = all_data$'Sample ID', \n                     dry_yr = all_data$'Dry-YR', \n                     hue = paste0(all_data$`Dry-YR`, \"YR\"),\n                     dry_value = Dry.Value, \n                     dry_chroma = Dry.Chroma, \n                     munsell_colour = Colour$'Dry- number',\n                     stringsAsFactors = FALSE)\n\n\n\n\n\nDry_df$munsell_colour_ <- gsub(\"10.5\", \"10\", Dry_df$munsell_colour)\n\n\n\nlibrary(aqp)\nour_dryhex <- munsell2rgb(Dry_df$hue, as.numeric(Dry_df$dry_value), as.numeric(Dry_df$dry_chroma))\nour_dryhex_no_na <- na.omit(our_hex)\n\nlibrary(ggplot2); library(munsell)\nggplot(Dry_df, aes(x = dry_value, y = SampleID, colour = factor(our_dryhex))) +\n  geom_point(size =6) +\n  theme_minimal() +\n  scale_colour_manual(values = our_dryhex)\n\n# Three variables\ndf2 <- read.table(header=T, text='\n cond1 cond2 yval\n    A      I 2\n    A      J 2.5\n    A      K 1.6\n    B      I 2.2\n    B      J 2.4\n    B      K 1.2\n    C      I 1.7\n    C      J 2.3\n    C      K 1.9\n')\n\ncbbPalette <- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\nx <- sample((gsub(\"FF\", \"\", our_dryhex)), 65)\n\n# To use for fills, add\n\nggplot(df2, aes(x=cond1, y=yval, colour=cond2)) + \n  geom_line(aes(group=cond2)) +\n  geom_point(size=30) +\n  scale_colour_manual(values=x)\n\n\n#################Wet coulour#####################\n\nWet_df <- data.frame(sampleID = all_data$'Sample ID', \n                     wet_yr = all_data$'Wet-YR', \n                     hue = paste0(all_data$`Wet-YR`, \"YR\"),\n                     wet_value = Wet.Value, \n                     wet_chroma = Wet.Chroma, \n                     munsell_colour = Colour$'wet-number',\n                     stringsAsFactors = FALSE)\n\n\n\n\n\nWet_df$munsell_colour_ <- gsub(\"10.5\", \"10\", Wet_df$munsell_colour)\n\n\nlibrary(aqp)\nour_wethex <- munsell2rgb(Wet_df$hue, as.numeric(Wet_df$wet_value), as.numeric(Wet_df$wet_chroma))\n\n\n\nlibrary(ggplot2); library(munsell)\nggplot(Wet_df, aes(x = wet_value, y = SampleID, colour = factor(our_wethex))) +\n  geom_point(size =6) +\n  theme_minimal()+\n  scale_colour_manual(values = our_wethex)\n\n \n##############colour-making fancy table##########\n\nu <- \"https://docs.google.com/spreadsheets/d/1vFtO8i3zH8pk4RoxkcQw5kFtCDeooYVimUaXGD8n1WY/pubhtml\"\ng <- readGoogleSheet(u)\nColour<- cleanGoogleTable(g, table = 6)\nall_data <- cleanGoogleTable(g, table = 1)\n     \n###########################ph########################################\nu <- \"https://docs.google.com/spreadsheets/d/1vFtO8i3zH8pk4RoxkcQw5kFtCDeooYVimUaXGD8n1WY/pubhtml\"\ng <- readGoogleSheet(u)\nph_and_ec<- cleanGoogleTable(g, table = 3)\nall_data <- cleanGoogleTable(g, table = 1)\n\n\n\n#ben's code to fix sheet\nn <- nrow(ph_and_ec)\nph <- ph_and_ec[seq(1, n, 2), ]\nec <- ph_and_ec[seq(2, n, 2), ]\n\n\nec_df <- data.frame(ph$'sample ID', ec)\n\n\n#plot these values like organic mass\n\nlibrary(\"ggplot2\")\nggplot(ec, aes('ECresult', ph$'sample ID')) +\n  geom_point() +\n  scale_y_reverse() + \n  theme_minimal(base_size = 14) \n\nlibrary(\"ggplot2\")\nggplot(ph, aes('pHresult', ph$'sample ID')) +\n  geom_point() +\n  scale_y_reverse() + \n  theme_minimal(base_size = 14) \n\n########################################### MS ###########################################################\n\nu <- \"https://docs.google.com/spreadsheets/d/1vFtO8i3zH8pk4RoxkcQw5kFtCDeooYVimUaXGD8n1WY/pubhtml\"\ng <- readGoogleSheet(u)\nMS<- cleanGoogleTable(g, table = 4)\nall_data <- cleanGoogleTable(g, table = 1)\n\n\nhfdf<- data.frame(MS$sampleID, MS$HFAverage)\nlfdf <- data.frame(MS$sampleID, MS$LFAverage)\n\nms_stack <- stack(list(hf= MS$'HFAverage',\n                       lf= MS$'LFAverage'))\n\nid_stack <- stack(list(depth= all_data$'Depth(m)',\n                       depth= all_data$'Depth(m)'))\n                  \n                  \nms_df <- data.frame(ms_stack, id_stack)\n\n\n\nlibrary(\"ggplot2\")\n\nggplot(lfdf, aes(MS.LFAverage,MS.sampleID)) +\n  geom_point() +\n  theme_minimal()\n\nggplot(hfdf, aes(MS.HFAverage, MS.sampleID)) +\n  geom_point(size = 4) +\n  theme_minimal()\n\nggplot(ms_df, aes(x=ms_df$'values', fill= ms_df$'ind', xlab=\"Mag\")) +\n  geom_histogram(alpha=.3)\n\n\n###################################Combine all together##############\nDry_df_.<- gsub(\"/\", \".\", all_data$'Dry-num')\nWet_df_.<- gsub(\"/\", \".\", all_data$'Wet-num')\nWet_df_._2.5<- gsub(\"2.5.1\", \"2.5\", Wet_df_.)\n\nlibrary(rioja)\n\nPH<- ph$pH.result \nEC <- ec$EC.result\nCarbon_Loss <- carb_per_mass_av_df$carb_per_mass_av\nOrganic_Loss <- org_per_mass_av_df$org_per_mass_av\nLF <- lfdf$MS.LFAverage\nHF <- hfdf$MS.HFAverage\n\nDRY <- Dry_df_.\nWET <- Wet_df_._2.5\n\ntotal <- data.frame(Carbon_Loss,\n                    Organic_Loss,\n                    LF,\n                    HF)            \n\ndepth <- all_data$Depth\n\n# examine the results and compare to original data \nstrat.plot(yvar=depth, ylabel= \"Depth\", cex.ylabel= 1,\n           cex.xlabel= 1 , srt.xlabel= 360,\n           y.rev=TRUE,\n           total) \n",
    "created" : 1429733053821.000,
    "dirty" : false,
    "encoding" : "WINDOWS-1252",
    "folds" : "",
    "hash" : "2068402556",
    "id" : "C3A009B0",
    "lastKnownWriteTime" : 1426037166,
    "path" : "C:/Users/user/Desktop/ra/RA.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}